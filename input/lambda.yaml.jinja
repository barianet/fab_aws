  AWSTemplateFormatVersion: "2010-09-09"

  Description: Stack for a Lambda function

  Metadata:
    CommitHash: TODO

  Parameters:
    MemorySize:
      Type: Number
      Default: 256
      Description: Memory size for Lambda function
    LambdaTimeout:
      Type: Number
      Default: 180
      Description: Timeout for Lambda function
    ScheduleExpression:
      Type: String
      Default: cron(15 0 ? * MON-FRI *)
      Description: Schedule expression for the scheduled task

  Resources:

    LambdaFunction:
      Type: AWS::Lambda::Function
      Metadata:
        Comment: A Lambda function to monitor running resources in AWS (updated comment)
      DependsOn: [MyLambdaExecutionRole]
      Properties:
        Code:
          ZipFile:
            "Fn::Join": ["\n", ["def handler(event, context):", "    print('this is a no-op')"] ]
        Role:
          "Fn::GetAtt": [MyLambdaExecutionRole, Arn]
        Timeout:
          Ref: LambdaTimeout
        Handler: index.handler
        Runtime: python2.7
        MemorySize:
          Ref: MemorySize

    MyLambdaExecutionRole:
      Type: AWS::IAM::Role
      Metadata:
        Comment: The role under which the lambda function executes.
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
          - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
        Path: /
        Policies:
          - PolicyName: WriteLogsToCloudWatch
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:*
                  Resource: arn:aws:logs:*:*:*

    LambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        SourceArn:
          "Fn::GetAtt": [ScheduledRule, Arn]
        FunctionName: { "Fn::GetAtt": [LambdaFunction, Arn] }
        Principal: events.amazonaws.com

    NagBotKey:
      Type: AWS::KMS::Key
      Properties:
        Description: A sample key
        KeyPolicy:
          Version: "2012-10-17"
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  "Fn::Join": [ ":", ["arn", "aws", "iam:", { "Ref": "AWS::AccountId" }, "root"] ]
              Action:
                - kms:Create*
                - kms:Describe*
                - kms:Encrypt*
                - kms:Decrypt*
                - kms:Enable*
                - kms:List*
                - kms:Put*
                - kms:Update*
                - kms:Revoke*
                - kms:Disable*
                - kms:Get*
                - kms:Delete*
                - kms:ScheduleKeyDeletion
                - kms:CancelKeyDeletion
              Resource: "*"

            - Sid: Lambda Decrypt
              Effect: Allow
              Action:
                - kms:Decrypt*
              Principal:
                AWS:
                  "Fn::GetAtt": [MyLambdaExecutionRole, Arn]
              Resource: "*"

    ScheduledRule:
      Type: AWS::Events::Rule
      Properties:
        Description: ScheduledRule for the Lambda Function you see
        ScheduleExpression:
          Ref: ScheduleExpression
        State: ENABLED
        Targets:
          - Arn:
              "Fn::GetAtt": [LambdaFunction, Arn]
            Id: ScheduledRule

    TravisCIUser:
      Type: AWS::IAM::User
      Properties:
        Path: /
        Policies:
          - PolicyName: PermitTravisUpdatesToLambdaCode
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:UpdateFunctionCode
                    - lambda:UpdateFunctionConfiguration
                  Resource:
                    - "Fn::GetAtt": [LambdaFunction, Arn]
                - Action:
                    - ec2:DescribeRegions
                    - ec2:DescribeSecurityGroups
                  Effect: Allow
                  Resource: "*"

  Outputs:
    LambdaFunction:
      Value: { Ref: LambdaFunction }
    LambdaFunctionARN:
      Description: ARN of the created Lambda function
      Value: { "Fn::GetAtt": [ LambdaFunction, Arn ] }
    LambdaExecutionRole:
      Description: Role under which the Lambda function executes
      Value: { Ref: MyLambdaExecutionRole }
    NagBotKmsKeyId:
      Description: Role under which the Lambda function executes
      Value: { Ref: NagBotKey }
    TravisCIUser:
      Description: The IAM user created for TravisCI to deploy code changes
      Value: { Ref: TravisCIUser }
